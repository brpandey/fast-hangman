Command-line hangman game with strategy built in. NOTE: Needs to broken out better into functional pieces - as the design is a bit monolithic at the moment.

The initial strategy was:

1. Guess the most common letter from the list of n-letter words in the dictionary (where n is the length of the hidden word). If more than one letter has the same frequency, guess the most common in dictionary frequency.
2. Filter out non-matching words as letters are guessed.

Examples:
$ java PlayHangman -f words.txt -baseline

$ java PlayHangman -f words.txt wonderful
			
----E----; score=1; status=KEEP_GUESSING

----E----; score=2; status=KEEP_GUESSING

----E----; score=3; status=KEEP_GUESSING

----E---L; score=4; status=KEEP_GUESSING

----E-F-L; score=5; status=KEEP_GUESSING

----E-FUL; score=6; status=KEEP_GUESSING

---DE-FUL; score=7; status=KEEP_GUESSING

W--DE-FUL; score=8; status=KEEP_GUESSING

WONDERFUL; score=8; status=GAME_WON

Usage:
$ java PlayHangman -h
Usage: Please enter a hangman word and optionally '-v'
if the verbose mode is desired or specify a list of hangman words

<Simple>
java PlayHangman -h
java PlayHangman -f dictionary.txt [-v] $word1
java PlayHangman -f dictionary.txt $word1 ... [$wordN]
java PlayHangman -f dictionary.txt -baseline
java PlayHangman -f dictionary.txt -batch large.txt

<Advanced A>
java PlayHangman -f dictionary.txt [(-lt)(-lv)(-v)(-v2)] [-clk2] $word1

(v2 = more verbose output)
(v = verbose output)
(lv = less verbose output)
(lt = less terse output)
(clk = high level timing output)

<Advanced B>
java PlayHangman -f dictionary.txt [[-clk][-clk2]] $word1 ... $wordN
(clk2 = lower level timing output)

<Initialize stumper finding strategy>
(for 175k words takes ~ 45 mins)
java PlayHangman -f dictionary.txt -init:stumpers

